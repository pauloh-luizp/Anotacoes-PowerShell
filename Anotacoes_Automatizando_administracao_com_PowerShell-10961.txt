2.Começando a usar o PowerShell========================================
=======================================================================
Entendendo a sintaxe dos comandos======================================

Encontrando os comandos================================================


3.CMDLETs para adminstração============================================
=======================================================================
CMDLETs para adminstração do AD========================================

#Criando usuário
~New-ADUser "Henry" -AccountPassword (ConvertTo-SecureString "senha"
  -asplaintext -force) -DisplayName "Henry" -Enable $true

#Gestão de grupo
~New-ADGroup "Win-Support" -GroupScope Global

#Adicionado usuários ao grupo
~Add-ADGroupMember "Win-Support" -Members "user1","user2"

#Adcionando computadores ao AD
~New-ADComputer <nome> -Enable $true

#Adicionando nova unidade organizacional
~New-ADOrganizationalUnit "OU-support"


CMDLETs para administracao de Redes====================================

#Configurando o IP
~New-NetIPAddress -IPAddress 192.168.0.171 -InterfaceAlias "Ethernet"
  -PrefixLength 16 -DefaultGateway 192.168.0.254

#Comandos de DNS
~Get-DnsClient

#Comandos de ServerZone
~Get-DnsServerZone


Outros CMDLETs para adminstracao de servidores=========================

~Get-Command -Module GroupPolicy

#Criando GPO
~New-GPO -Name "Win-Support"

#Exibindo todas as aplicacoes instaladas
~Get-WindowsFeature

#Instalando um recurso do sistema
~Install-WindowsFeature <recurso>

#Comando voltados para o Hyper-V
~Get-Command -Module Hyper-V

4.Trabalhando com o PipeLine do PowerShell=============================
=======================================================================
Seleção, organizacao e medindo os objetos no pipeline==================

#Ordenando
Get-Service | Sort-Object -Property Status,Name -Descending 
  | fw -Groupby Status

#Medindo
Get-Process | Measure-Object

#Selecionando
Get-Process | Sort-Object -Property VM | Select-Object -First 30

#Unicos
 | Select-Object -Unique

#Usando HashTables
Get-Process | Select-Object -Property Name, ID, @{n="Virtual Memory"; 
  e={$PSItem.vm / 1MB}}, @{n="Page Memory"; e={$PSItem.pm /1MB}}

Filtrando objetos enviados do pipeline=================================

-ceq case sensitive equal

Get-Services | Where-Object Status -eq "Running"
Get-Services | Where -FilterScript {$PSItem.Status -eq "Running"}
Get-Services | ? -FilterScript {$_.Status -eq "Running"}


Enumerando objetos vindo do pipeline===================================

Get-ChildItem -Path c:\Exemple -File | ForEach-Object <acao>
Get-ChildItem -Path c:\Exemple -File | % <acao>


Convertendo as saídas do pipeline======================================

 | Out-File -FilePath c:\arq.csv

 | ConvertTo-csv | Out-File -FilePath c:\arq.csv

 | Export-csv c:\arq.csv

 | Export-CliXml c:\arq.xml

 | Out-Printer

 | Out-GridView


5.Entendendo como o Pipeline funciona==================================
=======================================================================
Enviando dados para o pipeline=========================================

Get-Process -name notepad | Stop-Process


Considerações avançadas para o uso do pipeline=========================

#Comandos entre parenteses, executa o que está em parenteses primeiro
  ~Get-ADGroup "Win-Support" | Add-ADGrupMember -Members (Get-ADuser 
    -Filter {city -eq "Curitiba"})

6.Usando PSProviders aos PSDrives======================================
=======================================================================
Usando PSProviders=====================================================

Fornecem as estruturas e serviços que os Drivers precisam

~Get-PSProviders


Usando PSDrives========================================================

~Get-PSDrive

Podemos usar o help para ver o manual de utilização do Driver

~help FileSystem

Trabalhar com PSDrive é uma forma de estruturar de padronizar a estru-
  tura independente do sistema operacional. Abstrair a estrutura logica
  do sistema de arquivos

Criando um Drive:
  ~New-PSDrive -Name <nome> -PSProvider <provider> -Root c:\


7.Buscando informações de sistema usando o WMI e o CIM=================
=======================================================================
Entendendo WMI e CIM===================================================

WMI - Windows Managemnt Instrumentation
  Infraestrutura para dados de gerenciamento e operações em sistemas
  operacionais baseados no Windows e outros produtos Microsoft
  O WMI é construído com base nos padrões WBEM e CIM da 
  Distributed Management Task Force (DMTF). As informações do sistema
  nas camadas de hardware e software são expostas por meio de uma 
  interface padrão por meio do WMI. O resultado líquido disso é a 
  capacidade de visualizar facilmente e, às vezes, modificar as 
  informações do sistema e as definições de configuração.

CIM - Common Interface Model
 O CIM fornece uma definição comum de informações de gerenciamento 
 para sistemas, redes, aplicativos e serviços, e permite extensões de 
 fornecedores. As definições comuns da CIM permitem que os fornecedores
 troquem informações de gerenciamento semanticamente ricas entre 
 sistemas em toda a rede.


Buscando e filtrando dados usando o WMI e o CIM========================

Get-WmiObject -Namespace root\CIMv2 -list

Get-CimClass -Namespace 

Conseguimos usar SQL nas consultas
~Get-CimInstance -Query "SELECT * FROM win32_logicaldisk 
  WHERE DriveType = 3"

Sessões
~New-CimSession -ComputerName <nome>


Fazendo mudanças no sistema via WMI/CIM================================

Desligando o sistema
~Invoke-WmiMethod -Class win32_operatingSystem -Name win32Shutdown
  -ArgumentList 0 -ComputerName <nome>


8.Trabalhando com variáveis, arrays e hash tables======================
=======================================================================
Usando variáveis=======================================================

$var.GetType()


Trabalhando com as variáveis===========================================

$var.ToUpper()
$var.ToLower()
$TimeDate.Day
$TimeDate.Hour
$TimeDate.DayOfWeek
$TimeDate.Year
$TimeDate.AddDays(100)


Trabalhando com arrays e hash tables===================================

Arrays:
  $PCs = "PC01","PC02","PC03"
  [System.Array]$Computers = "PC01" 
    cria um array
  $PCs += "PC04"
    adiciona no final do array
  $PCs.removeAt(2)
    remove

HashTable: Semelhante a um array só que com duas colunas, na primeira
  coluna armazena uma chave primária e a na segunda coluna um valor
  
  $HashT = @{"PC01" = "192.168.0.10"; "PC02" = "10.0.0.10"}
  
  $HashT.Add("PC03", "172.16.0.10")


9.Scripts básicos======================================================
=======================================================================
Introdução aos scripts=================================================

PowerShell Galery, ScriptCenter, GitHub do PowerShell

Restrições na execução de scripts
  ~Get-ExecutionPolicy -List
  ~Set-ExecutionPolicy
    -Unrestricted: qualquer script pode ser rodado
    -RemoteSigned: somente aqueles assinados digitalmente
    -AllSigned: todos precisam ser assinados digitalmente
    -Restricted: nenhum script é permitido
    -ByPass: não há confirmação para rodar o script

Assinando um script digitalmente

$cert2code = Get-ChildItem -Path cert:\currentuser\my -CodeSigningCert

Set-AuthenticodeSignature -FilePath "c:\Script.ps1" 
  -Certificate $cert2code


Construindo Scripts====================================================

switch ($opc){
  1 {
  }
  2 {
  }
  Default {
  }
}

switch -wildcard ($opc){
  "*1" {
  }
  "*2" {
  }
  Default {
  }
}

Do {
  comandos
} While(condicao)

Do {
  comandos
} Until(condicao)


Importando dados de arquivos variáveis=================================

Get-Content -Path c:\ -Include "*.txt", "*.csv"
Get-Content c:\User.json | convertFrom-json


10.Avançando nos scripts===============================================
=======================================================================
Solicitando entradas dos usuários======================================

$Answer = Read-Host "Input you Answer"
$Credent = Get-credential

$Credent | Export-clixml c:\AdminCredent.xml

Exibindo opções de selecção na tela
  ~Get-Service | Out-GridView -PassThru -Title "Services" | 
    Stop-service -whatif

Passando parâmetros: Criamos um script param.ps1 contendo:
Param(
  [string]$ComputerName
  [int]$EventId
)

No PowerShell:

.\Param.ps1 -ComputerName <nome> -EventID <id>


Visão geral sobre documentação dos scripts=============================

Comentários com "#" blocos de comentários com "<# #>"
Os comentário iniciais colocamos com um "." no inicio e colocamos em
  letras maiusculas


Resolvendo problemas e manipulando erros===============================

Os erros são armazenados em uma variável padrão "$Error[0]"

Utilizando o parâmetro "-ErrorAction" podemos especificar o que será
  feito em caso de erro ao executar o comando
    Stop para a execução
    inquire pergunta o que fazer

A variável "$ErrorActionPreference" diz a tratativa padrãodo do erros

Podemos usar Try and Cat

Try {
  get-wmiobject -class win32_disk -ComputeName $Comp -ErrorAction stop
} Cath {
  write-host "Fail running the command"
} Finally {
  write-host "Finished running the command"
}


Funções e modulos======================================================

Podemos criar modulos e colocarmos ele dentro da pasta padrão de 
  modulos em: c:\Windows\System32\WindowsPowerShell\v1.0\Modules

Existe o dotsourcing que permite abrir um powershell dentro de um 
  outro powershell


11.Administrando computadores Remotos==================================
=======================================================================
Usando o controle remoto básico========================================

Ativando o controle remoto
~Enable-PSRemoting

Sessão remota persistentes
~Enter-PSSession -ComputerName <nome>

Sessão remota eferemera
~Invoke-Command -ComputerName <nome> -ScriptBlock {Get-service}
  *permitido no máximo 32 comandos


Usando técnicas avançadas de acesso remoto=============================

Usando parâmetros:
  
$log = "Security"
$quant = 15

Invoke-Command -ComputerName <nome> -ScriptBlock {
  Param ($LogRem, $QuantRem)
  Get-EventLog -LogName $LogRem -Newest $QuantRem | ft -AutoSize
} -ArgumentList $Log, $Quant


Usando PSSessions======================================================

New-PSSession <nome>

Connect-PSSession -Id <id>

Exit-PSSession


12.Usando Background Job e Scheduled Jobs==============================
=======================================================================
Usando Background Jobs=================================================

Pertence ao Microsoft.PowerShell.Core

O parâmetro "-AsJob" executa o job em background

Com um Background Job sabemos quando a execução terminou e conseguimos
  ver as saidas geradas


Usando Scheduled Jobs==================================================

$Options = New-ScheduledJobOption -StartIfOnBattery -StartIfIdle
  -RunElevated -WakeToRun

$Trigger = New-JobTrigger -Weekly

$Register-SheduledJob -Name <nome> -ScriptBlock {Update-Help -Module *
  -Force} -Trigger $Trigger -SheduledJobOption $Options

#Verficando os jobs agendados
  ~taskschd.msc


13.Usando técnicas Avançadas do PowerShell=============================
=======================================================================
Criando PowerShell Profiles============================================

Criando um perfil:
  New-Item -Path $profile -Type file -Force

Colocamos nossas preferências dentro do aquivo criado em forma de 
  comando powershell


Usando técnicas avançadas no PowerShell================================

Comparadores de busca
 -In
 -NotIn
 -Contain
 -NotContain
 -Match
 -NotMatch
